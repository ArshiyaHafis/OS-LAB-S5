alias userSP R1;
userSP = SP;
alias ppTable R8;
ppTable = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16);
PTBR = [ppTable + 14];

[ppTable + 13] = SP;				//Save the current value of User SP into the corresponding Process Table entry.
SP = [ppTable + 11] * 512 - 1;			// Setting SP to UArea Page number * 512 - 1

alias offset R2;
alias sysCallNo R3;
				//userSP - 4 is the location of the argument 
offset = (userSP - 5) % 512;
sysCallNo = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + offset];

[ppTable+ 9] = sysCallNo;		//sys call no

if(sysCallNo == 13) then
	alias waitPID R4;
	waitPID  = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;
	if (waitPID == [SYSTEM_STATUS_TABLE+1] || [PROCESS_TABLE + waitPID*16+4] == TERMINATED || waitPID >= 16 || waitPID <0 ) then
		[[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = -1;
		[ppTable + 9] = 0;
		SP = [ppTable + 13];
		ireturn;
	endif;
	[ppTable + 4] = WAIT_PROCESS;
    	[ppTable + 5] = waitPID;
    	multipush(R0,R1,R2, R3);
    	call MOD_5;
	multipop(R0,R1,R2,R3);
	[[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = 0;
endif;

if(sysCallNo == 14) then // Signal
    alias i R4;
    alias currentPID R5;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    i = 0;
    while(i < 16) do
        if ([PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + i*16 + 5] == currentPID) then
            [PROCESS_TABLE + i*16 + 4] = READY;
            [PROCESS_TABLE + i*16 + 5] = -1;
        endif;
        i = i + 1;
    endwhile;
    [[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = 0;

endif;

if(sysCallNo == 11) then // Getpid
    [[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+1];

endif;

if(sysCallNo == 12) then // Getppid
    [[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+2];
    
endif;

[ppTable + 9] = 0;
SP = [ppTable + 13];
ireturn;
