[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = -1;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;				//Save the current value of User SP into the corresponding Process Table entry.

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;			// Setting SP to UArea Page number * 512 - 1
backup;
multipush(EIP);
alias userSP R6;
userSP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

if(EC != 0 || userSP == (([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15] * 512) - 1)) then
	print "ERROR";
	if (EC == 1) then
		//print EIP;
		//print R0;
		print "ILLEGAL INSTRUCTION";
	else
		if(EC == 2) then
			print "ILLEGAL MEMORY ACCESS";
		else
			print "ARITHMETIC EXPRESSION";
		endif;
	endif;
	
	
	//invoke exit process
	//print "exit";
	multipush(R0,R1,R2,SP,PTBR,PTLR);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	multipop(R0,R1,R2,SP,PTBR,PTLR);
	
	//print R0;
	//print "call scheduler";
	multipush(R0,R1,R2,SP,PTBR,PTLR);
	call MOD_5;
	multipush(R0,R1,R2,SP,PTBR,PTLR);
	//print "exit";

endif;

if ( EC == 0 ) then 
    if ( EPN == 4 || EPN == 5 || EPN == 6 || EPN == 7)then
        multipush(R0,R1,R2);
        R1 = 5;
        R2 = [ DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
        // R3 = [SYSTEM_STATUS_TABLE + 1];
        call MEMORY_MANAGER;
        [PTBR + EPN*2]  = R0;
        [PTBR + EPN*2 + 1] = "1100";
        multipop(R0,R1,R2);
    else
        // breakpoint;
        
        multipush(R0,R1,R2,R3);
        R1 = 1;
        call MEMORY_MANAGER;
        [PTBR + 4]  = R0;
        [PTBR + 5]  = "1110";

        R1 = 1;
        call MEMORY_MANAGER;
        [PTBR + 6]  = R0;
        [PTBR + 7]  = "1110";
        multipop(R0,R1,R2,R3);
    endif;
endif;
	
//print "doe";
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
multipop(EIP);
restore;
	//increment SP, store EIP, to location pointed by SP
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
SP = SP + 1;
[[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14] + 2*((SP)/512)] * 512 + ((SP)%512)] = EIP;
//print "bwhah";
	
	
	
ireturn;
